# -*- coding: utf-8 -*-
"""sliding_tile_puzzle.ipynb

Automatically generated by Colaboratory.

"""

import random
import time



class State:
    """ State of sliding number puzzle
        Contains array of values called 'board' to indicate
        tile positions, and the position of tile '0', which
        indicates the empty space on the board.         """

    boardSize = 3

    def __init__(self, s = None):

        if s == None:
            
            # iterator holding numbers 0 to 9
            tiles = range(self.boardSize * self.boardSize).__iter__()
            
            # below line reads numbers 0-8 stored in tiles and store them in 2d array (list of lists)
            self.board = [[next(tiles) for i in range(self.boardSize)] for j in range(self.boardSize)]

            #keep track of empty position
            self.position = [0,0]
        
        else:
            #copy the board
            self.board = []
            for row in s.board:
                self.board.append(list(row))

            #copy the positions    
            self.position = list(s.position)
            
    # converts to readable string to print
    def __str__(self):
        rstr = ''
        for row in self.board:
            rstr += str(row) + '\n'
        return rstr
    
    #overload to allow comparison of lists and states with ==
    def __eq__(self, other):
        if isinstance(other, State):
            return self.board == other.board
        elif isinstance(other, list):
            return self.board == other
        else:
            return NotImplemented

    #turn into immutable ojbect for set lookup
    def toTuple(self):
        tpl = ()
        for row in self.board:
            tpl += (tuple(row),)
        return tpl
    
    #create board from a list or tuple 
    def setBoard(self, brd):
        self.board = brd
        for row in range(self.boardSize):
            for col in range(self.boardSize):
                if self.board[row][col] == 0:
                    self.position = [row, col]
                    return None
        raise StandardError('Set board configuration does not have an empy spot!')

class Node:
    
    nodeCount = 0
    
    def __init__(self, p, a, c, s):
        
        #keep track of how many nodes were created
        self.__class__.nodeCount += 1    
        self.nodeID = self.nodeCount
        
        self.parent = p
        self.cost = c 
        self.action = a
        self.state = s
        
    #test equivalence should be state

    def __str__(self):
        rstr = 'NodeID: ' + str(self.nodeID) + '\n'
        if self.parent != None:
            rstr += 'Parent: ' + str(self.parent.nodeID) + '\n'
        if self.action != None:
            rstr += 'Action: ' + self.action  + '\n'
        rstr += 'Cost:   ' + str(self.cost) + '\n'
        rstr += 'State:\n' + str(self.state)
        return rstr
            
# creates and returns a new node which would be child of current node n being passed to the function    
def childNode(n, action, problem):
    return Node(n,action, n.cost + 1, problem.apply(action,State(n.state)))

class Problem:
    """Class that defines a search problem"""

    def __init__(self):
        self.actions = ['U','L','D','R']
        self.initialState = 0
        self.goalState = 0

    def apply(self, a, s):

        #positions after move, still refers to s.position object
        post = s.position

        #make a copy
        pre = list(post)
        
        #compute post position
        if a == 'U':
            post[0] = max(pre[0] - 1, 0)
        elif a == 'L':            
            post[1] = max(pre[1] - 1, 0)
        elif a == 'D':
            post[0] = min(pre[0] + 1, s.boardSize - 1)
        elif a == 'R':
            post[1] = min(pre[1] + 1, s.boardSize - 1)
        else:
            print('Undefined action: ' + str(a))
            raise StandardError('Action not defined for this problem!')

        #store the old tile to slide/swap the tiles
        tile = s.board[pre[0]][pre[1]]
        
        s.board[pre[0]][pre[1]] = s.board[post[0]][post[1]]
        s.board[post[0]][post[1]] = tile      

#       print (pre, ' ', post,' ',s.board[pre[0]][pre[1]] , '<--', s.board[post[0]][post[1]])      

        return s
        
    def applicable(self, s):
        actionList = []

        #check if actions are applicable
        #Not in top row
        if s.position[0] > 0:
            actionList.append('U')

        #not in left most col
        if s.position[1] > 0:
            actionList.append('L')

        #not in bottom row
        if s.position[0] < (s.boardSize - 1):
            actionList.append('D')

        #not in right col
        if s.position[1] < (s.boardSize - 1):
            actionList.append('R')

        return actionList

    def goalTest(self, s):
        return self.goalState == s    

def applyRndMoves(numMoves, s, p):
    for i in range(numMoves):
        p.apply(p.actions[random.randint(0,3)], s)
    
def solution(node):
    ''' Returns actionList, cost of the solution generated from the node'''

    actions = []
    cost = node.cost

    while node.parent != None:
        actions.insert(0,node.action)
        node = node.parent    

    return actions, cost

class Searches:

    def BFS(self, problem):
      Node.nodeCount = 0
      
      lineup = []
      visited = []
      neighbors = []

      init_node = Node(None, 'D', 1, problem.initialState)

      if(problem.goalTest(init_node.state) == True): 
        return init_node.state
      else:
        lineup.append(init_node)
        visited.append(init_node.state)

      while(len(lineup) != 0):
          for n in lineup:
            for a in problem.applicable(n.state):
              child_node = childNode(n, a, problem)
              if (problem.goalTest(child_node.state) == True):
                # print(child_node.action, end=" ")
                # print("\n")
                return child_node.state
              elif (child_node.state not in visited):
                neighbors.append(child_node)
                visited.append(child_node.state)
                # print(child_node.action, end=" ")
              else:
                # Decrementing the node count because this newly created child node has already been visited and will not be added to neighbors
                Node.nodeCount -= 1

          lineup.clear()
          lineup = neighbors.copy()
          neighbors.clear()   
    
    def DFS(self, problem):
      Node.nodeCount = 0
      stack = []
      visited_states = []

      start_node = Node(None, 'U', 1, problem.initialState)

      if(problem.goalTest(start_node.state) == True):
        return start_node.state
      else:
        visited_states.append(start_node.state)
        stack.append(start_node)
      
      while(len(stack) != 0):
        cur_node = stack.pop()
        
        if(problem.goalTest(cur_node.state) == True):
          return cur_node.state
        else:
          for action in reversed(problem.applicable(cur_node.state)):
            child = childNode(cur_node, action, problem)
            if(child.state not in visited_states):
              visited_states.append(child.state)
              stack.append(child)
            else:
              # Decrementing the node count because this newly created child node has already been visited and will not be added to the stack
              Node.nodeCount -= 1
          # print(stack[-1].action, end=" ")

if __name__ == '__main__':
       
    search = Searches()
    
    p = Problem()
    s = State()
    
    p.goalState = State(s)

    # print("Goal state \n", p.goalState)
    
    p.apply('R', s)
    p.apply('R', s)
    p.apply('D', s)
    p.apply('D', s)
    p.apply('L', s)
    
    p.initialState = State(s)
    
    print("Initial State \n", p.initialState)


    print('=== BFS  ===')
    startTime = time.clock()
    res=search.BFS(p)
    print(res)
    print("Time " + str(time.clock() - startTime))
    print("Explored Nodes: " + str(Node.nodeCount))

    
    print("Generating Random Position")
    si = State(s)
    applyRndMoves(15,si,p)
    p.initialState = si
    print(si)
    
    startTime = time.clock()
    
    print('=== BFS  ===')
    startTime = time.clock()
    res=search.BFS(p)
    print(res)
    print("Time " + str(time.clock() - startTime))
    print("Explored Nodes: " + str(Node.nodeCount))

    
    print(p.initialState)
    
    
    print('=== DFS  ===')
    startTime = time.clock()
    res = search.DFS(p)
    print(res)
    print("Time " + str(time.clock() - startTime))
    print("Explored Nodes: " + str(Node.nodeCount))
 
    
    
    print("Generating Random Position")
    si = State(s)
    applyRndMoves(15,si,p)
    p.initialState=si
    print(si)
    
    startTime = time.clock()
    
    print('=== DFS  ===')
    startTime = time.clock()
    res = search.DFS(p)
    print(res)
    print("Time " + str(time.clock() - startTime))
    print("Explored Nodes: " + str(Node.nodeCount))

